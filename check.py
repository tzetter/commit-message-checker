#!/usr/local/bin/python3
import re
import sys

subject_max_length = 72

frequent_verbs = (
    'abandon',
    'accept',
    'accompany',
    'account',
    'accuse',
    'ache',
    'achieve',
    'acknowledge',
    'acquire',
    'act',
    'active',
    'adapt',
    'add',
    'address',
    'adhere',
    'adjust',
    'admit',
    'adopt',
    'advise',
    'advocate',
    'affect',
    'affirm',
    'afford',
    'agree',
    'aim',
    'align',
    'allow',
    'alter',
    'analyse',
    'analyze',
    'announce',
    'annoy',
    'annul',
    'answer',
    'anticipate',
    'appeal',
    'appear',
    'applicate',
    'apply',
    'appoint',
    'appreciate',
    'approach',
    'approve',
    'argue',
    'arise',
    'arrange',
    'arrest',
    'arrive',
    'ask',
    'assert',
    'assess',
    'assign',
    'assist',
    'associate',
    'assume',
    'assure',
    'astonish',
    'attach',
    'attack',
    'attempt',
    'attend',
    'attract',
    'avoid',
    'awake',
    'back',
    'backup',
    'bake',
    'base',
    'battle',
    'be',
    'bear',
    'beat',
    'become',
    'beg',
    'begin',
    'behave',
    'believe',
    'belong',
    'bend',
    'benefit',
    'better',
    'beware',
    'bind',
    'bite',
    'blacklist',
    'blame',
    'blend',
    'blow',
    'born',
    'borrow',
    'bother',
    'bounce',
    'bow',
    'break',
    'bring',
    'broadcast',
    'build',
    'bump',
    'burn',
    'burst',
    'busy',
    'buy',
    'cache',
    'calculate',
    'call',
    'capture',
    'care',
    'carry',
    'carryout',
    'cast',
    'catch',
    'categorize',
    'cause',
    'celebrate',
    'challenge',
    'change',
    'chant',
    'charge',
    'chase',
    'chat',
    'check',
    'choose',
    'chop',
    'circle',
    'claim',
    'clarify',
    'clean',
    'cleanse',
    'clear',
    'climb',
    'close',
    'clothe',
    'collapse',
    'collect',
    'combine',
    'come',
    'command',
    'comment',
    'commit',
    'communicate',
    'compare',
    'compensate',
    'compete',
    'compile',
    'complain',
    'complete',
    'compose',
    'compress',
    'conceal',
    'concentrate',
    'conclude',
    'concur',
    'conduct',
    'configure',
    'confirm',
    'confront',
    'connect',
    'connote',
    'consider',
    'consist',
    'consolidate',
    'constitute',
    'construct',
    'consult',
    'consume',
    'contact',
    'contain',
    'contest',
    'continue',
    'contribute',
    'control',
    'convert',
    'convey',
    'convince',
    'cook',
    'cope',
    'copy',
    'correct',
    'cost',
    'counsel',
    'count',
    'cover',
    'crawl',
    'create',
    'criticize',
    'cross',
    'cry',
    'cut',
    'damage',
    'dance',
    'deal',
    'debate',
    'decide',
    'declare',
    'deconstruct',
    'defeat',
    'defend',
    'defer',
    'define',
    'delay',
    'delete',
    'deliver',
    'demand',
    'demolish',
    'demonstrate',
    'deny',
    'depart',
    'depend',
    'depict',
    'derive',
    'describe',
    'design',
    'desire',
    'destroy',
    'detail',
    'detect',
    'determine',
    'develop',
    'devote',
    'die',
    'direct',
    'disable',
    'disappear',
    'discourage',
    'discover',
    'discuss',
    'dislike',
    'dismiss',
    'displace',
    'display',
    'distinguish',
    'distribute',
    'dive',
    'divide',
    'do',
    'document',
    'dominate',
    'downgrade',
    'drag',
    'draw',
    'dread',
    'dream',
    'dress',
    'drill',
    'drink',
    'drive',
    'drop',
    'earn',
    'eat',
    'echo',
    'edit',
    'educate',
    'elect',
    'elevate',
    'emerge',
    'emphasize',
    'employ',
    'enable',
    'encourage',
    'end',
    'endorse',
    'endure',
    'enforce',
    'engage',
    'enhance',
    'enjoy',
    'enquire',
    'enroll',
    'ensure',
    'enter',
    'enumerate',
    'equal',
    'equate',
    'erase',
    'escape',
    'establish',
    'estimate',
    'evaluate',
    'examine',
    'except',
    'exclude',
    'excuse',
    'execute',
    'exercise',
    'exert',
    'exist',
    'expand',
    'expect',
    'experience',
    'experiment',
    'explain',
    'explore',
    'express',
    'extend',
    'extract',
    'face',
    'fail',
    'fall',
    'fault',
    'fear',
    'feature',
    'feed',
    'feel',
    'fetch',
    'fight',
    'fill',
    'filter',
    'find',
    'finish',
    'fit',
    'fix',
    'flatten',
    'flee',
    'float',
    'flunk',
    'fly',
    'focus',
    'fold',
    'follow',
    'forbid',
    'force',
    'foresee',
    'forget',
    'forgive',
    'form',
    'format',
    'forward',
    'found',
    'free',
    'freeze',
    'fry',
    'gain',
    'gather',
    'generate',
    'get',
    'gitignore',
    'give',
    'giveup',
    'glance',
    'go',
    'going',
    'govern',
    'grant',
    'grin',
    'grind',
    'grow',
    'guess',
    'guide',
    'hand',
    'handle',
    'hang',
    'happen',
    'harm',
    'hate',
    'have',
    'head',
    'hear',
    'help',
    'hide',
    'hint',
    'hire',
    'hit',
    'hold',
    'hop',
    'hope',
    'house',
    'hug',
    'hurt',
    'identify',
    'ignore',
    'illuminate',
    'illustrate',
    'imagine',
    'implement',
    'imply',
    'import',
    'importune',
    'impose',
    'impress',
    'improve',
    'in-line',
    'include',
    'incorporate',
    'increase',
    'incur',
    'indicate',
    'influence',
    'inform',
    'initialize',
    'initiate',
    'injure',
    'inline',
    'insist',
    'install',
    'instruct',
    'integrate',
    'intend',
    'intercept',
    'internalize',
    'interpret',
    'introduce',
    'invalidate',
    'invest',
    'investigate',
    'invite',
    'involve',
    'iron',
    'issue',
    'join',
    'journey',
    'joy',
    'judge',
    'jump',
    'justify',
    'keep',
    'key',
    'kick',
    'kill',
    'kiss',
    'knock',
    'know',
    'label',
    'lack',
    'land',
    'last',
    'laugh',
    'launch',
    'lay',
    'lead',
    'lean',
    'leap',
    'learn',
    'leave',
    'lend',
    'let',
    'lie',
    'lift',
    'light',
    'like',
    'limit',
    'link',
    'list',
    'listen',
    'live',
    'load',
    'locate',
    'lock',
    'log',
    'look',
    'lose',
    'love',
    'maintain',
    'make',
    'manage',
    'map',
    'mark',
    'marry',
    'match',
    'materialize',
    'matter',
    'mean',
    'measure',
    'meet',
    'melt',
    'menace',
    'mention',
    'merge',
    'migrate',
    'mind',
    'misinform',
    'miss',
    'mix',
    'mock',
    'move',
    'mutate',
    'name',
    'near',
    'need',
    'neglect',
    'negotiate',
    'nod',
    'note',
    'notice',
    'observe',
    'obtain',
    'occupy',
    'occur',
    'offer',
    'officiate',
    'omit',
    'open',
    'operate',
    'optimize',
    'order',
    'organise',
    'organize',
    'ought',
    'overcome',
    'override',
    'overtake',
    'owe',
    'own',
    'pack',
    'package',
    'paint',
    'partake',
    'participate',
    'pass',
    'patch',
    'pay',
    'peel',
    'perform',
    'permit',
    'persuade',
    'pick',
    'pin',
    'pinch',
    'place',
    'plan',
    'play',
    'plow',
    'point',
    'ponder',
    'possess',
    'postpone',
    'pour',
    'practice',
    'predict',
    'prefer',
    'prepare',
    'present',
    'preserve',
    'press',
    'presume',
    'pretend',
    'prevent',
    'print',
    'privatize',
    'proceed',
    'process',
    'procure',
    'produce',
    'promise',
    'promote',
    'propose',
    'prosecute',
    'protect',
    'protest',
    'prove',
    'provide',
    'publish',
    'pull',
    'punch',
    'purchase',
    'pursue',
    'push',
    'put',
    'puton',
    'qualify',
    'question',
    'quit',
    'quote',
    'race',
    'raise',
    'randomize',
    're-define',
    're-do',
    're-instate',
    'reach',
    'react',
    'read',
    'realise',
    'realize',
    'reason',
    'rebase',
    'recall',
    'receive',
    'reckon',
    'recognise',
    'recognize',
    'recollect',
    'recommend',
    'record',
    'recover',
    'recur',
    'rede',
    'redefine',
    'redirect',
    'redo',
    'reduce',
    'refactor',
    'refer',
    'reference',
    'reflect',
    'reformat',
    'refresh',
    'refuse',
    'regard',
    'register',
    'reinstate',
    'reject',
    'relate',
    'relax',
    'release',
    'relieve',
    'rely',
    'remain',
    'remember',
    'remind',
    'remove',
    'rename',
    'reorder',
    'reorganise',
    'reorganize',
    'repair',
    'repeat',
    'repel',
    'rephrase',
    'replace',
    'reply',
    'report',
    'represent',
    'request',
    'require',
    'research',
    'reside',
    'resist',
    'resolve',
    'respond',
    'rest',
    'restore',
    'restrict',
    'restructure',
    'result',
    'retain',
    'retire',
    'retreat',
    'return',
    'reveal',
    'revert',
    'review',
    'reword',
    'rewrap',
    'rewrite',
    'rid',
    'ride',
    'ring',
    'rise',
    'risk',
    'roast',
    'roll',
    'rule',
    'run',
    'sale',
    'salute',
    'sample',
    'sanction',
    'satisfy',
    'save',
    'say',
    'score',
    'scrub',
    'search',
    'secure',
    'see',
    'seek',
    'seem',
    'select',
    'self-initialize',
    'sell',
    'send',
    'separate',
    'serve',
    'set',
    'settle',
    'sew',
    'shake',
    'shape',
    'share',
    'shed',
    'shift',
    'shine',
    'shoot',
    'shout',
    'show',
    'shrink',
    'shut',
    'sign',
    'signify',
    'simplify',
    'sing',
    'sink',
    'sit',
    'skip',
    'sleep',
    'slice',
    'slide',
    'slip',
    'smile',
    'solve',
    'sort',
    'sound',
    'speak',
    'specify',
    'spell',
    'spend',
    'spill',
    'spit',
    'split',
    'spread',
    'stack',
    'stand',
    'standardize',
    'stare',
    'start',
    'state',
    'stay',
    'steal',
    'steer',
    'step',
    'stick',
    'sting',
    'stink',
    'stir',
    'stop',
    'store',
    'stress',
    'stretch',
    'strike',
    'struggle',
    'study',
    'submit',
    'succeed',
    'suffer',
    'suggest',
    'suit',
    'supply',
    'support',
    'suppose',
    'surprise',
    'surround',
    'survive',
    'suspect',
    'sway',
    'swear',
    'sweep',
    'swell',
    'swing',
    'switch',
    'sync',
    'synchronise',
    'synchronize',
    'take',
    'talk',
    'talkover',
    'target',
    'taste',
    'teach',
    'tear',
    'tell',
    'tempt',
    'tend',
    'terminate',
    'test',
    'testify',
    'thank',
    'think',
    'threaten',
    'throw',
    'tie',
    'tolerate',
    'touch',
    'track',
    'trade',
    'train',
    'transfer',
    'translate',
    'travel',
    'tread',
    'treat',
    'trim',
    'trust',
    'try',
    'turn',
    'tweak',
    'twist',
    'uncover',
    'understand',
    'undertake',
    'undo',
    'unfold',
    'unify',
    'unite',
    'unload',
    'unpack',
    'unskip',
    'unwrap',
    'update',
    'upgrade',
    'urge',
    'use',
    'utter',
    'vacuum',
    'value',
    'vanish',
    'vary',
    'view',
    'visit',
    'vocalize',
    'voice',
    'volunteer',
    'vote',
    'wait',
    'wake',
    'walk',
    'want',
    'warn',
    'warrant',
    'wash',
    'watch',
    'wave',
    'wear',
    'weep',
    'weigh',
    'welcome',
    'whip',
    'whitelist',
    'win',
    'wish',
    'withdraw',
    'wonder',
    'work',
    'workout',
    'worry',
    'wrap',
    'writ',
    'write',
)

suffix_hash_code_re = r'\s?\(\s*#[a-zA-Z_0-9]+\s*\)$'

def check_subject(subject: str, verbs: list[str]):
    errors = []

    subject_wo_code = re.sub(suffix_hash_code_re, '', subject)

    if len(subject_wo_code) > subject_max_length:
        errors.append(
            f"The subject exceeds the limit of {subject_max_length} characters " +
            f"(got: {len(subject_wo_code)}): {subject_wo_code}). \n" +
            "Please shorten the subject to make it more succinct."
        )

    first_word = subject.split(' ', 1)[0]
    if not first_word:
        errors.append(
            "Expected the subject to start with a verb in imperative mood " +
            "consisting of letters and possibly dashes in-between, " +
            f"but the subject was: {subject_wo_code}. \n" +
            "Please re-write the subject so that it starts with " +
            "a verb in imperative mood."
        )
    else:
        capitalized = first_word.capitalize()
        if capitalized != first_word:
            errors.append(
                "The subject must start with a capitalized word, " +
                f"but the current first word is: {first_word}. \n" +
                f"Please capitalize to: {capitalized}."
            )


        first_word_lower = first_word.lower()

        if first_word_lower not in verbs:
            errors.append(
                "The subject must start with a verb in imperative mood (according to a whitelist), " +
                f"but got: {first_word}."
            )

    if subject_wo_code.endswith('.'):
        errors.append(
            "The subject must not end with a dot ('.'). \n" +
            "Please remove the trailing dot(s)."
        )

    return errors

url_line_re = r'^[^ ]+://[^ ]+$'
link_definition_re = r'^\[[^\]]+]\s*:\s*[^ ]+://[^ ]+$'

def check_body(subject: str, body_lines: list[str]):
    errors = []

    if len(body_lines) == 0:
        errors.append("At least one line is expected in the body, but got empty body.")
        return errors

    if len(body_lines) == 1 and body_lines[0].strip() == "":
        errors.append("Unexpected empty body")
        return errors

    for i, line in enumerate(body_lines):
        if re.match(url_line_re, line) or re.match(link_definition_re, line):
            continue

        if len(line) > 72:
            errors.append(
                f"The line {i + 3} of the message (line {i + 1} of the body) " +
                f"exceeds the limit of 72 characters. The line contains {len(line)} characters: " +
                "{line}. " +
                "Please reformat the body so that all the lines fit 72 characters."
            )

    body_first_word = body_lines[0].split(' ', 1)[0]
    if body_first_word:
        subject_first_word = subject.split(' ', 1)[0]
        if subject_first_word:
            if subject_first_word.lower() == body_first_word.lower():
                errors.append(
                    f"The first word of the subject ({subject_first_word}) must not match " +
                    "the first word of the body. " +
                    "Please make the body more informative by adding more information instead of repeating " +
                    "the subject. For example, start by explaining the problem that this change is " +
                    'intendended to solve or what was previously missing (e.g., "Previously, ....").'
                )

    return errors

def check(text, verbs):
    errors = []
    if text.startswith("Merge branch"):
        return errors

    trimmed_lines = [line.strip() for line in text.split('\n')]

    if not trimmed_lines:
        errors.append("The message is empty.")
        return errors

    subject = trimmed_lines[0]
    errors += check_subject(subject, verbs)

    if len(trimmed_lines) > 2:
        errors += check_body(subject, trimmed_lines[2:])

    return errors

def get_commit_message():
    if len(sys.argv) > 0:
        if '.git' in sys.argv[1]:
            with open(sys.argv[1], "r") as f:
                return f.read()
        return ' '.join(sys.argv[1:])

if __name__ == '__main__':
    message = get_commit_message()
    if not message:
        print('Commit message not found')
        sys.exit()

    message_errors = check(message, frequent_verbs)

    if len(message_errors) == 0:
        print("The message is OK.")
    else:
        for error in message_errors:
            print(error)
        sys.exit(1)
